#![allow(clippy::needless_doctest_main)]

//! # Faux
//!
//! A library to create
//! [mocks](https://en.wikipedia.org/wiki/Mock_object) out of
//! `struct`s.
//!
//! `faux` provides macros to help you create mocks out of your
//! structs without creating traits and using generics/trait objects.
//!
//! **`faux` makes liberal use of unsafe rust features, and it is not
//! recommended for use outside of tests.**
//!
//! ## Usage:
//! ```
//! // creates the mockable struct
//! #[faux::create]
//! pub struct Foo {
//!     a: u32,
//! }
//!
//! // mocks the methods
//! #[faux::methods]
//! impl Foo {
//!     pub fn new(a: u32) -> Self {
//!         Foo { a }
//!     }
//!
//!     pub fn add_stuff(&self, input: u32) -> u32 {
//!         self.a + input
//!     }
//!
//!     pub fn add_ref(&self, input: &u32) -> u32 {
//!         self.a + *input
//!     }
//! }
//!
//! fn main() {
//!   // you can create the original object
//!   let real = Foo::new(3);
//!   assert_eq!(real.add_stuff(2), 5);
//!
//!   // can create a mock using the auto-generated `faux` method
//!   let mut mock = Foo::faux();
//!
//!   // if the inputs and output for a method are all static types
//!   // then it can be mocked safely
//!   faux::when!(mock.add_stuff).safe_then(|x| x);
//!   assert_eq!(mock.add_stuff(5), 5);
//!
//!   // other methods can be mocked using unsafe
//!   unsafe { faux::when!(mock.add_ref).then(|&x| x + 1) }
//!   assert_eq!(mock.add_ref(&3), 4);
//! }
//! ```

mod mock;
mod mock_store;
mod when;

/// Creates a mockable struct
pub use faux_macros::create;

/// Creates mockable methods inside an impl block
pub use faux_macros::methods;

/// Creates a [When](When) for a specific instance/method pair
///
/// This macro is a wrapper around calling the `_when_{method_name}()`
/// method that is auto-generated by [#[methods]](attr.methods.html).
///
/// ```
/// #[faux::create]
/// pub struct Foo {}
///
/// #[faux::methods]
/// impl Foo {
///     pub fn some_method(&self, a: u32, b: i8) -> i32 {
///         /* implementation code */
///         # panic!()
///     }
/// }
///
/// fn main() {
///     let mut mock = Foo::faux();
///     // input and output types are stored in the type signature of `When`
///     // calling `when!` or the auto-generated method creates the same `When`
///     let a: faux::When<(u32, i8), i32> = faux::when!(mock.some_method);
///     let b: faux::When<(u32, i8), i32> = mock._when_some_method();
/// }
/// ```
#[proc_macro_hack::proc_macro_hack]
pub use faux_macros::when;

pub use mock::{Mock, SafeMock, UnsafeMock};
pub use mock_store::{MaybeFaux, MockStore};
pub use when::When;
